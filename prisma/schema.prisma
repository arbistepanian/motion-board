// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  // Relations
  accounts      Account[]
  sessions      Session[]

  // App relations
  boards        Board[]  @relation("BoardOwner")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- MotionBoard tables ---
model Board {
  id        String   @id @default(cuid())
  name      String
  ownerId   String
  owner     User     @relation("BoardOwner", fields: [ownerId], references: [id])
  lists     List[]
  createdAt DateTime @default(now())
}

model List {
  id        String   @id @default(cuid())
  boardId   String
  title     String
  position  Int
  board     Board    @relation(fields: [boardId], references: [id])
  cards     Card[]
  createdAt DateTime @default(now())

  @@index([boardId, position])
}

model Card {
  id          String   @id @default(cuid())
  listId      String
  title       String
  description String?  @db.Text
  position    Int
  list        List     @relation(fields: [listId], references: [id])
  createdAt   DateTime @default(now())

  @@index([listId, position])
}
